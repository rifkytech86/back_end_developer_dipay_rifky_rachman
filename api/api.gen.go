// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AddEmployeeResponse defines model for AddEmployeeResponse.
type AddEmployeeResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		CompanyId *string `json:"company_id,omitempty"`
		Id        *string `json:"id,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// CompaniesResponse defines model for CompaniesResponse.
type CompaniesResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Id *string `json:"id,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// DuplicateZeroResponse defines model for DuplicateZeroResponse.
type DuplicateZeroResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Result *[]int32 `json:"result,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code   *int    `json:"code,omitempty"`
	Errors *string `json:"errors,omitempty"`
	Status *string `json:"status,omitempty"`
}

// GetCompanyResponse defines model for GetCompanyResponse.
type GetCompanyResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Count *int `json:"count,omitempty"`
		Rows  *[]struct {
			Address         *string `json:"address,omitempty"`
			CompanyName     *string `json:"company_name,omitempty"`
			Id              *string `json:"id,omitempty"`
			IsActive        *bool   `json:"is_active,omitempty"`
			TelephoneNumber *string `json:"telephone_number,omitempty"`
		} `json:"rows,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// GetDataCountriesResponse defines model for GetDataCountriesResponse.
type GetDataCountriesResponse struct {
	Code *string `json:"code,omitempty"`
	Data *[]struct {
		Name      *string   `json:"name,omitempty"`
		Region    *string   `json:"region,omitempty"`
		Timezones *[]string `json:"timezones,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// GetEmployeeByCompanyIDResponse defines model for GetEmployeeByCompanyIDResponse.
type GetEmployeeByCompanyIDResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Employees *[]struct {
			Id          *string `json:"id,omitempty"`
			Jobtitle    *string `json:"jobtitle,omitempty"`
			Name        *string `json:"name,omitempty"`
			PhoneNumber *string `json:"phone_number,omitempty"`
		} `json:"employees,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// GetEmployeeByIDResponse defines model for GetEmployeeByIDResponse.
type GetEmployeeByIDResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Id          *string `json:"id,omitempty"`
		Jobtitle    *string `json:"jobtitle,omitempty"`
		Name        *string `json:"name,omitempty"`
		PhoneNumber *string `json:"phone_number,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// HelloResponse defines model for HelloResponse.
type HelloResponse struct {
	Message string `json:"message"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Token *string `json:"token,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// UpdateEmployeeDataResponse defines model for UpdateEmployeeDataResponse.
type UpdateEmployeeDataResponse struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		CompanyId *string `json:"company_id,omitempty"`
		Id        *string `json:"id,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// UpdateSetActiveCompany defines model for UpdateSetActiveCompany.
type UpdateSetActiveCompany struct {
	Code *string `json:"code,omitempty"`
	Data *struct {
		Id       *string `json:"id,omitempty"`
		IsActive *bool   `json:"is_active,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// AddCompanyJSONBody defines parameters for AddCompany.
type AddCompanyJSONBody struct {
	Address         string `json:"address" validate:"required,validatorAddress"`
	CompanyName     string `json:"company_name" validate:"required,validatorCompanyName"`
	TelephoneNumber string `json:"telephone_number" validate:"required,validatorTelephoneNumber"`
}

// AddEmployeeJSONBody defines parameters for AddEmployee.
type AddEmployeeJSONBody struct {
	Email       string `json:"email" validate:"required,validatorEmail"`
	Jobtitle    string `json:"jobtitle" validate:"required,validatorJobTitle"`
	Name        string `json:"name" validate:"required,validatorEmployee"`
	PhoneNumber string `json:"phone_number" validate:"required,validatorTelephoneNumber"`
}

// UpdateEmployeeDataJSONBody defines parameters for UpdateEmployeeData.
type UpdateEmployeeDataJSONBody struct {
	Email       string `json:"email" validate:"required,validatorEmail"`
	Jobtitle    string `json:"jobtitle" validate:"required,validatorJobTitle"`
	Name        string `json:"name" validate:"required,validatorEmployee"`
	PhoneNumber string `json:"phone_number" validate:"required,validatorTelephoneNumber"`
}

// DuplicateZeroJSONBody defines parameters for DuplicateZero.
type DuplicateZeroJSONBody struct {
	N []int32 `json:"n" validate:"required,validatorDuplicateZero"`
}

// HelloParams defines parameters for Hello.
type HelloParams struct {
	Id int `form:"id" json:"id"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Password string `json:"password" validate:"required,validatorPassword"`
	Username string `json:"username" validate:"required,validatorUserName"`
}

// AddCompanyJSONRequestBody defines body for AddCompany for application/json ContentType.
type AddCompanyJSONRequestBody AddCompanyJSONBody

// AddEmployeeJSONRequestBody defines body for AddEmployee for application/json ContentType.
type AddEmployeeJSONRequestBody AddEmployeeJSONBody

// UpdateEmployeeDataJSONRequestBody defines body for UpdateEmployeeData for application/json ContentType.
type UpdateEmployeeDataJSONRequestBody UpdateEmployeeDataJSONBody

// DuplicateZeroJSONRequestBody defines body for DuplicateZero for application/json ContentType.
type DuplicateZeroJSONRequestBody DuplicateZeroJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// this is for get companies
	// (GET /api/companies)
	GetCompany(ctx echo.Context) error
	// Add Company
	// (POST /api/companies)
	AddCompany(ctx echo.Context) error
	// Add Employee
	// (POST /api/companies/{company_id}/employees)
	AddEmployee(ctx echo.Context, companyId string) error
	// this is for update employee data
	// (PUT /api/companies/{company_id}/employees/{employee_id})
	UpdateEmployeeData(ctx echo.Context, companyId string, employeeId string) error
	// this is for get data employee by company
	// (GET /api/companies/{id}/employees)
	GetEmployeeByCompanyID(ctx echo.Context, id string) error
	// this is for update status active
	// (PUT /api/companies/{id}/set_active)
	UpdateCompanyStatusActive(ctx echo.Context, id string) error
	// this is for get data api countries from extenal
	// (GET /api/countries)
	GetDataCountries(ctx echo.Context) error
	// this is for test 1 find diplicate zero
	// (POST /api/duplicate-zeroes)
	DuplicateZero(ctx echo.Context) error
	// this is for Delete employee by ID
	// (DELETE /api/employees/{id})
	DeleteEmployeeByID(ctx echo.Context, id string) error
	// this is for get get employee by id
	// (GET /api/employees/{id})
	GetEmployeeByID(ctx echo.Context, id string) error
	// This is just a test endpoint to get you started. Please delete this endpoint.
	// (GET /api/hello)
	Hello(ctx echo.Context, params HelloParams) error
	// User Login
	// (POST /api/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompany(ctx)
	return err
}

// AddCompany converts echo context to params.
func (w *ServerInterfaceWrapper) AddCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCompany(ctx)
	return err
}

// AddEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) AddEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "company_id", runtime.ParamLocationPath, ctx.Param("company_id"), &companyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEmployee(ctx, companyId)
	return err
}

// UpdateEmployeeData converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEmployeeData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "company_id", runtime.ParamLocationPath, ctx.Param("company_id"), &companyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	// ------------- Path parameter "employee_id" -------------
	var employeeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "employee_id", runtime.ParamLocationPath, ctx.Param("employee_id"), &employeeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter employee_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateEmployeeData(ctx, companyId, employeeId)
	return err
}

// GetEmployeeByCompanyID converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeeByCompanyID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeeByCompanyID(ctx, id)
	return err
}

// UpdateCompanyStatusActive converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompanyStatusActive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompanyStatusActive(ctx, id)
	return err
}

// GetDataCountries converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataCountries(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDataCountries(ctx)
	return err
}

// DuplicateZero converts echo context to params.
func (w *ServerInterfaceWrapper) DuplicateZero(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DuplicateZero(ctx)
	return err
}

// DeleteEmployeeByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeeByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEmployeeByID(ctx, id)
	return err
}

// GetEmployeeByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeeByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeeByID(ctx, id)
	return err
}

// Hello converts echo context to params.
func (w *ServerInterfaceWrapper) Hello(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HelloParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Hello(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/companies", wrapper.GetCompany)
	router.POST(baseURL+"/api/companies", wrapper.AddCompany)
	router.POST(baseURL+"/api/companies/:company_id/employees", wrapper.AddEmployee)
	router.PUT(baseURL+"/api/companies/:company_id/employees/:employee_id", wrapper.UpdateEmployeeData)
	router.GET(baseURL+"/api/companies/:id/employees", wrapper.GetEmployeeByCompanyID)
	router.PUT(baseURL+"/api/companies/:id/set_active", wrapper.UpdateCompanyStatusActive)
	router.GET(baseURL+"/api/countries", wrapper.GetDataCountries)
	router.POST(baseURL+"/api/duplicate-zeroes", wrapper.DuplicateZero)
	router.DELETE(baseURL+"/api/employees/:id", wrapper.DeleteEmployeeByID)
	router.GET(baseURL+"/api/employees/:id", wrapper.GetEmployeeByID)
	router.GET(baseURL+"/api/hello", wrapper.Hello)
	router.POST(baseURL+"/api/login", wrapper.Login)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
