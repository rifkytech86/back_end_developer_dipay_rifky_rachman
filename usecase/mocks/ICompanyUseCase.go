// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/dipay/api"
import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/dipay/model"

// ICompanyUseCase is an autogenerated mock type for the ICompanyUseCase type
type ICompanyUseCase struct {
	mock.Mock
}

// AddCompany provides a mock function with given fields: _a0, _a1
func (_m *ICompanyUseCase) AddCompany(_a0 context.Context, _a1 *api.AddCompanyJSONBody) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *api.AddCompanyJSONBody) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.AddCompanyJSONBody) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompany provides a mock function with given fields: _a0
func (_m *ICompanyUseCase) GetCompany(_a0 context.Context) ([]*model.Companies, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Companies
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Companies); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Companies)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompanyStatusActive provides a mock function with given fields: ctx, id
func (_m *ICompanyUseCase) UpdateCompanyStatusActive(ctx context.Context, id string) (string, bool, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
