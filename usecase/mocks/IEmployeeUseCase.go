// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/dipay/api"
import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/dipay/model"

// IEmployeeUseCase is an autogenerated mock type for the IEmployeeUseCase type
type IEmployeeUseCase struct {
	mock.Mock
}

// AddEmployee provides a mock function with given fields: _a0, _a1, _a2
func (_m *IEmployeeUseCase) AddEmployee(_a0 context.Context, _a1 string, _a2 *api.AddEmployeeJSONBody) (string, string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.AddEmployeeJSONBody) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.AddEmployeeJSONBody) string); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *api.AddEmployeeJSONBody) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteEmployeeByID provides a mock function with given fields: _a0, _a1
func (_m *IEmployeeUseCase) DeleteEmployeeByID(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmployeeByCompanyID provides a mock function with given fields: _a0, _a1
func (_m *IEmployeeUseCase) GetEmployeeByCompanyID(_a0 context.Context, _a1 string) ([]*model.Employees, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.Employees
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Employees); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Employees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: _a0, _a1
func (_m *IEmployeeUseCase) GetEmployeeByID(_a0 context.Context, _a1 string) (*model.Employees, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Employees
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Employees); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployeeData provides a mock function with given fields: ctx, companyID, employeeID, req
func (_m *IEmployeeUseCase) UpdateEmployeeData(ctx context.Context, companyID string, employeeID string, req *api.UpdateEmployeeDataJSONRequestBody) (string, string, error) {
	ret := _m.Called(ctx, companyID, employeeID, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.UpdateEmployeeDataJSONRequestBody) string); ok {
		r0 = rf(ctx, companyID, employeeID, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *api.UpdateEmployeeDataJSONRequestBody) string); ok {
		r1 = rf(ctx, companyID, employeeID, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *api.UpdateEmployeeDataJSONRequestBody) error); ok {
		r2 = rf(ctx, companyID, employeeID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
